// Generated by CoffeeScript 1.6.3
(function() {
  var argv, b, bins, coffee2json, e, fs, help, parse, path, print, spawn, sync, version, _i, _len;

  fs = require('fs');

  argv = require('optimist').argv;

  print = require('util').print;

  spawn = require('child_process').spawn;

  path = require('path');

  sync = require('which').sync;

  bins = ['coffee', 'jsonlint'];

  for (_i = 0, _len = bins.length; _i < _len; _i++) {
    b = bins[_i];
    try {
      sync(b);
    } catch (_error) {
      e = _error;
      throw e;
    }
  }

  exports.run = function() {
    var coffeeargs, t;
    if (argv.h != null) {
      return help();
    } else if (argv.v) {
      return version();
    } else if ((argv.o == null) || (argv.i == null)) {
      return help();
    } else {
      coffeeargs = '-cbp';
      if (argv.w != null) {
        coffeeargs += 'w';
      }
      t = spawn('coffee', ['-o', argv.o, coffeeargs, argv.i]);
      return t.stdout.on('data', function(d) {
        return coffee2json(d);
      });
    }
  };

  coffee2json = function(data) {
    var base, file, filename;
    file = argv.i.split('/');
    filename = file[file.length - 1].split('.')[0];
    base = argv.o;
    if (base[base.length - 1] !== '/') {
      base = base + '/';
    }
    filename = base + filename + '.json';
    return parse(data, base, filename);
  };

  parse = function(d, base, out) {
    var p, primary, temp;
    temp = base + process.pid;
    fs.writeFileSync(temp, d);
    p = path.dirname(fs.realpathSync(__filename));
    primary = spawn(p + '/parse.sh', [temp, out]);
    primary.on('exit', function(code) {
      var time;
      if (code === 0) {
        time = (new Date).toString().split(' ')[4];
        return console.log(time + ' - compiled ' + out);
      } else {
        return console.log('ERROR ' + out);
      }
    });
    return primary.stderr.on('data', function(d) {
      var jsonlint;
      try {
        return JSON.parse(d.toString());
      } catch (_error) {
        e = _error;
        jsonlint = spawn('jsonlint', [out]);
        return jsonlint.stdout.on('data', function(f) {
          return console.log(f.toString());
        });
      }
    });
  };

  help = function() {
    return console.log('coffee2json -i inputFile -o outputdirectory');
  };

  version = function() {
    return fs.realpath(__filename, function(err, resolvedpath) {
      var cd;
      if (err) {
        throw err;
      }
      cd = path.dirname(resolvedpath);
      return fs.readFile(cd + '/../package.json', function(err, data) {
        var info;
        if (err) {
          throw err;
        }
        info = JSON.parse(data);
        return console.log('v' + info.version);
      });
    });
  };

}).call(this);
